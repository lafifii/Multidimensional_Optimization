for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
print(a)
print(b)
print("a,b")
for (k in 1:length(l)) {
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
print(a)
print(b)
print("a,b")
for (k in 1:length(l)) {
print(df[columns[l[k]], i])
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
print(a)
print(b)
print("a,b")
for (k in 1:length(l)) {
print(columns[l[k]], i)
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
print(a)
print(b)
print("a,b")
for (k in 1:length(l)) {
print(columns[l[k]], i)
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
print(columns[l[k]])
print(i)
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = length(columnas)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
print(k)
print(l[k])
print(columns[l[k]])
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = colnames(data)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = colnames(data)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
print(k)
print(l[k])
print(columns[l[k]])
a[k] = df[columns[l[k]], i]
b[k] = df[columns[l[k]], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = colnames(data)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
# columns[l[k]] -> l[k]
a[k] = df[l[k], i]
b[k] = df[l[k], j]
}
print(a)
print(b)
print("a,b")
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = colnames(data)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
# columns[l[k]] -> l[k]
a[k] = df[l[k], i]
b[k] = df[l[k], j]
}
print(a)
print(b)
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
ParetoDomina <- function(a, b) {
mi = 0
my = 0
for(i in 1:length(a)) {
if (a[i] >= b[i]) {
mi = mi + 1
}
if (a[i] > b[i]) {
my = my + 1
}
}
if (mi == length(a)) {
if (my > 0) {
returnValue(TRUE)
}
}
returnValue(FALSE)
}
skylines <- function(data, l) {
df = data
t = length(data[,1])
columns = colnames(data)
for (i in 1:t) {
if ((colnames(data[0,][i]) %in% colnames(df))) {
a = array(data = 0, dim = length(l))
for (j in (i+1):t) {
if (colnames(data[0,][j]) %in% colnames(df)) {
b = array(data = 0, dim = length(l))
for (k in 1:length(l)) {
# columns[l[k]] -> l[k]
print(k)
print(l[k])
a[k] = df[l[k], i]
b[k] = df[l[k], j]
}
print(a)
print(b)
if (ParetoDomina(a, b)) {
df[j] <- NULL
# df = df.drop(j)
}
else if (ParetoDomina(b, a)) {
df[i] <- NULL
# df = df.drop(i)
break
}
}
}
}
}
returnValue(df)
}
data_skylines = skylines(data, columnas)
